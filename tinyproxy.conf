##
## tinyproxy.conf -- tinyproxy 守护进程配置文件
##
## 此示例 tinyproxy.conf 文件包含示例设置
## 在评论中有解释。 对于所有的描述
## 参数，请参见 tinproxy.conf(5) 手册页。
##

#
# 用户/组：这允许您设置将要使用的用户和组
# 在初始绑定到端口后用于 tinyproxy
# 作为root用户。 用户名或组名或 UID 或 GID
可以使用#号。
#
User nobody
Group nobody

#
# 端口：指定 tinyproxy 将监听的端口。 请注意
# 如果您选择在低于 1024 的端口上运行，您将需要
# 使用 root 启动 tinyproxy。
#
Port 8090

#
# Listen: 如果你有多个接口，这允许你绑定到
# 只有一个。 如果注释掉，tinyproxy 将绑定到所有
# 接口存在。
#
#Listen 192.168.0.1

#
# 绑定：这允许您指定将使用哪个接口
# 传出连接。这对于多宿主机器很有用
# 您希望所有流量都显示为从一个特定接口传出。
#
#Bind 192.168.0.1

#
# BindSame：如果启用，tinyproxy 会将传出连接绑定到
# 传入连接的 IP 地址。
#
#BindSame yes

#
# 超时：连接不活动的最大秒数
# 在被 tinyproxy 关闭之前允许拥有。
#
Timeout  600

#
# ErrorFile: 定义给定 HTTP 错误时要发送的 HTML 文件
# 发生。您可能需要根据自己的需要自定义位置
# 特定安装。通常要检查的位置是：
# /usr/local/share/tinyproxy
# /usr/share/tinyproxy
# /etc/tinyproxy
#
#ErrorFile 404 "/usr/local/share/tinyproxy/404.html"
#ErrorFile 400 "/usr/local/share/tinyproxy/400.html"
#ErrorFile 503 "/usr/local/share/tinyproxy/503.html"
#ErrorFile 403 "/usr/local/share/tinyproxy/403.html"
#ErrorFile 408 "/usr/local/share/tinyproxy/408.html"

#
# DefaultErrorFile: 如果没有则发送的 HTML 文件
# 用 ErrorFile 关键字定义的 HTML 文件，用于 HTTP 错误
# 已经发生了。
#
DefaultErrorFile "/usr/local/share/tinyproxy/default.html"

#
# StatHost：这配置了被处理的主机名或IP地址
# as the stat host: 每当收到对该主机的请求时，
# Tinyproxy 将返回一个内部统计页面而不是
# 将请求转发到该主机。 StatHost 的默认值为
# tinyproxy.stats。
#
#StatHost“tinyproxy.stats”
#

#
# StatFile：发出请求时发送的 HTML 文件
# 用于统计主机。如果此文件不存在，则基本页面为
# 在 tinyproxy 中硬编码。
#
StatFile "/usr/local/share/tinyproxy/stats.html"

#
# LogFile: 允许你指定信息应该存放的位置
# 登录到。如果您希望登录到 syslog，请禁用此功能
# 并启用 Syslog 指令。这些指令是相互的
# 独家的。如果既未指定 Syslog 也未指定 LogFile，则输出为
# 到标准输出。
#
#LogFile "/usr/local/var/log/tinyproxy/tinyproxy.log"

#
# Syslog：告诉 tinyproxy 使用 syslog 而不是日志文件。这
# 如果正在使用 Logfile 指令，则不得启用选项。
# 这两个指令是互斥的。
#
#Syslog On

#
# 日志级别：警告
#
# 设置日志级别。允许的设置是：
# 关键（最不冗长）
#	错误Error
#	警告Warning
#	注意Notice
# 连接Connect（在没有信息噪音的情况下记录连接）
# 信息Info（最详细）
#
# LogLevel 设置级别及以上的日志。例如，如果
# LogLevel 被设置为Warning，然后从Warning 到的所有日志消息
# Critical 将被输出，但 Notice 及以下将被抑制。
#
LogLevel Info

#
# PidFile：将主tinyproxy线程的PID写入这个文件，这样它
# 可用于信号目的。
# 如果没有指定，不会写入pidfile。
#
#PidFile "/usr/local/var/run/tinyproxy/tinyproxy.pid"

#
# XTinyproxy：告诉 Tinyproxy 包含 X-Tinyproxy 标头，其中
# 包含客户端的 IP 地址。
#
#XTinyproxy Yes

#
# Upstream：
#
# 打开上游代理支持。
#
# 上游规则允许您有选择地路由上游连接
# 基于被访问站点的主机/域。
#
# 语法：upstream type (user:pass@)ip:port ("domain")
# 或者：上游无“域”
# 括号中的部分是可选的。
# 可能的类型有 http、socks4、socks5、none
#
# For example:
# # 到测试域的连接通过 testproxy
# upstream  http testproxy:8008 ".test.domain.invalid"
# upstream  http testproxy:8008 ".our_testbed.example.com"
# upstream  http testproxy:8008 "192.168.128.0/255.255.254.0"
#
# # 使用基本身份验证的上游代理
#  upstream http user:pass@testproxy:8008 ".test.domain.invalid"
#
#  # no upstream proxy for internal websites and unqualified hosts
#  upstream none ".internal.example.com"
#  upstream none "www.example.com"
#  upstream none "10.0.0.0/8"
#  upstream none "192.168.0.0/255.255.254.0"
#  upstream none "."
#
# # 到这些盒子的连接通过它们的 DMZ 防火墙
#  upstream http cust1_firewall:8008 "testbed_for_cust1"
#  upstream http cust2_firewall:8008 "testbed_for_cust2"
#
# # 默认上游是互联网防火墙
#  upstream http firewall.internal.example.com:80
#
# 你也可以使用 SOCKS4/SOCKS5 上游代理：
#  upstream socks4 127.0.0.1:9050
#  upstream socks5 socksproxy:1080
#
# LAST 匹配规则赢得路由决策。 如您所见，您
# 可以使用主机或域：
#  name     matches host exactly
#  .name    matches any host in domain "name"
#  .        matches any host with no domain (in 'empty' domain)
#  IP/bits  matches network/mask
#  IP/mask  matches network/mask
#
#Upstream http some.remote.proxy:port

#
# MaxClients：这是绝对最高的线程数
#被创建。 也就是说，只有 MaxClients 数量的客户端可以
# 同时连接。
#
MaxClients 100

#
# Allow：自定义授权控制。 如果有的话
# 访问控制关键字然后默认操作是拒绝。 否则，
# 默认操作是允许。
#
# 控件的顺序很重要。 所有传入连接都是
# 根据顺序对控件进行测试。
#
#Allow 127.0.0.1
#Allow ::1

# BasicAuth：用于访问代理的 HTTP“基本身份验证”。
# 如果指定了任何条目，则仅授予经过身份验证的访问权限
# 用户。
#BasicAuth 用户密码

BasicAuth  admin 123456

#
# AddHeader：将指定的标头添加到传出的 HTTP 请求中
# Tinyproxy 制作。请注意，此选项不适用于 HTTPS
# 流量，因为 Tinyproxy 无法控制交换的标头。
#
#AddHeader "X-My-Header" "Powered by Tinyproxy"

#
# ViaProxyName：HTTP RFC 需要“Via”标头，但使用
# 真实的主机名是一个安全问题。如果以下指令
# 启用，提供的字符串将用作主机名
# 通过标头；否则，将使用服务器的主机名。
#
ViaProxyName "tinyproxy"

#
# DisableViaHeader: 当设置为yes时，Tinyproxy不会添加
# 请求的 Via 标头。这实际上将 Tinyproxy 置于
# 隐身模式。请注意，RFC 2616 需要代理来设置 Via
# 标头，因此启用此选项会破坏合规性。
# 除非您知道自己在做什么，否则不要禁用 Via 标头...
#
#DisableViaHeader Yes

#
# Filter：这允许您指定过滤器文件的位置。
#
#Filter "/usr/local/etc/tinyproxy/filter"

#
# FilterURLs：基于 URL 而不是域进行过滤。
#
#FilterURLs On

#
# FilterExtended：使用 POSIX 扩展的正则表达式而不是
# 基本的。
#
#FilterExtended On

#
# FilterCaseSensitive：使用区分大小写的正则表达式。
#
#FilterCaseSensitive On

#
# FilterDefaultDeny：更改过滤系统的默认策略。
# 如果这个指令被注释掉，或者设置为“No”，那么默认
# 政策是允许所有没有明确拒绝的东西
#过滤文件。
#
# 但是，通过将此指令设置为“是”，默认策略变为
# 拒绝过滤器_not_明确允许的所有内容
# 文件。
#
#FilterDefaultDeny Yes

#
# Anonymous：如果存在 Anonymous 关键字，则使用匿名代理
# 已启用。列出的标头允许通过，而所有其他标头
# 被拒绝。如果不存在 Anonymous 关键字，则所有标题都是
# 允许通过。您必须在标题周围加上引号。
#
# 大多数网站都需要启用 cookie 才能正常工作，所以
# 如果您访问这些网站，您将需要允许 Cookies 通过。
#
#Anonymous "Host"
#Anonymous "Authorization"
#Anonymous "Cookie"

#
# ConnectPort：这是 tinyproxy 允许的端口列表，当
# 使用 CONNECT 方法。要完全禁用 CONNECT 方法，请设置
# 值为 0。如果没有找到 ConnectPort 线，则所有端口都是
# 允许。
#
# SSL使用以下两个端口。
#
#ConnectPort 443
#ConnectPort 563

#
# 配置一个或多个 ReversePath 指令以启用反向代理
# 支持。使用反向代理可以进行一些
# 个站点看起来好像它们是单个站点的一部分。
#
# 如果取消注释以下两个指令并运行 tinyproxy
# 在你自己电脑的 8888 端口上，你可以使用 Google 访问
# http://localhost:8888/google/ 和有线新闻使用
# http://localhost:8888/wired/news/。两者都不会真正起作用
# 直到您取消注释 ReverseMagic，因为它们使用绝对链接。
#
#ReversePath "/google/" "http://www.google.com/"
#ReversePath "/wired/" "http://www.wired.com/"

#
# 当使用 tinyproxy 作为反向代理时，强烈推荐
# 通过取消注释下一个指令来关闭普通代理。
#
#ReverseOnly Yes

#
# 使用 cookie 跟踪反向代理映射。如果需要反转
# 具有绝对链接的代理站点，您必须取消注释。
#
#ReverseMagic Yes

#
# 用于访问此反向代理的 URL。该 URL 用于
# 重写 HTTP 重定向，这样它们就不会逃脱代理。如果你
# 有一个反向代理链，你需要把最外面的
# URL here（最终用户在他/她的浏览器中键入的地址）。
#
# 如果未设置，则不会发生重写。
#
#ReverseBaseURL "http://localhost:8888/"



